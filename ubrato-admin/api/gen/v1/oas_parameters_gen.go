// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// DeleteSessionParams is parameters of deleteSession operation.
type DeleteSessionParams struct {
	// The admin_refresh_token for the user.
	AdminRefreshToken string
}

func unpackDeleteSessionParams(packed middleware.Parameters) (params DeleteSessionParams) {
	{
		key := middleware.ParameterKey{
			Name: "admin_refresh_token",
			In:   "cookie",
		}
		params.AdminRefreshToken = packed[key].(string)
	}
	return params
}

func decodeDeleteSessionParams(args [0]string, argsEscaped bool, r *http.Request) (params DeleteSessionParams, _ error) {
	c := uri.NewCookieDecoder(r)
	// Decode cookie: admin_refresh_token.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "admin_refresh_token",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AdminRefreshToken = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "admin_refresh_token",
			In:   "cookie",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateSessionParams is parameters of updateSession operation.
type UpdateSessionParams struct {
	// The refresh_token for the user.
	AdminRefreshToken string
}

func unpackUpdateSessionParams(packed middleware.Parameters) (params UpdateSessionParams) {
	{
		key := middleware.ParameterKey{
			Name: "admin_refresh_token",
			In:   "cookie",
		}
		params.AdminRefreshToken = packed[key].(string)
	}
	return params
}

func decodeUpdateSessionParams(args [0]string, argsEscaped bool, r *http.Request) (params UpdateSessionParams, _ error) {
	c := uri.NewCookieDecoder(r)
	// Decode cookie: admin_refresh_token.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "admin_refresh_token",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AdminRefreshToken = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "admin_refresh_token",
			In:   "cookie",
			Err:  err,
		}
	}
	return params, nil
}
